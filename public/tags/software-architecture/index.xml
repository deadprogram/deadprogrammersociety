<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>software architecture on Dead Programmer SOciety</title>
    <link>/tags/software-architecture/</link>
    <description>Recent content in software architecture on Dead Programmer SOciety</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 05 Nov 2007 10:57:00 -0800</lastBuildDate><atom:link href="/tags/software-architecture/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>RubyConf 2007 - Day 1 - &#34;Advanced Ruby Class Design&#34; - Jim Weirich</title>
      <link>/2007/11/rubyconf-2007-day-1-advanced-ruby-class.html</link>
      <pubDate>Mon, 05 Nov 2007 10:57:00 -0800</pubDate>
      
      <guid>/2007/11/rubyconf-2007-day-1-advanced-ruby-class.html</guid>
      <description>Jim Weirich is a very smart guy. So smart that his presentation was not about complicated classes, but about Ruby itself and how to take advantage of it to simplify things. Jim&amp;rsquo;s background in computing is long and varied, something like a history lesson in programming languages. Here is the abbreviated list:
FORTRAN &amp;gt; C &amp;gt; Modula 2 &amp;gt; C++ &amp;gt; Eiffel &amp;gt; Java
and in parallel to this:
LISP &amp;gt; FORTH &amp;gt; TCL &amp;gt; Perl</description>
    </item>
    
    <item>
      <title>I Speak For The Code</title>
      <link>/2007/03/i-speak-for-code.html</link>
      <pubDate>Wed, 14 Mar 2007 15:14:00 -0700</pubDate>
      
      <guid>/2007/03/i-speak-for-code.html</guid>
      <description>Recently I was in a client meeting with a bunch of managers to discuss some very complex changes that were being proposed for an existing system. I was invited to the meeting so I could &amp;ldquo;speak for the code&amp;rdquo;, which to them meant that I could validate the ideas of the group based on my knowledge of the code base.
After the meeting ended, I kept mulling over that phrase &amp;ldquo;speaking for the code&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Gazing Into The ORM</title>
      <link>/2007/02/gazing-into-orm.html</link>
      <pubDate>Fri, 23 Feb 2007 08:24:00 -0800</pubDate>
      
      <guid>/2007/02/gazing-into-orm.html</guid>
      <description>Jeremy Miller has an interesting post today regarding Object Relation Mapping (ORM). Droves of developers are now flocking to ORMs via Ruby on Rails, Castle, or one of the other many projects in this space, so it is good to have people like Jeremy exploring from a real implementation perspective.
Anyhow, his post really is concerned with applications that use an existing database, have a large amount of logical processing. Simply applying an ORM without considering the logical implications of the data, not only fails to take advantage of the power of ORMs, but falls into a bit of a quagmire, with potentially a very non-DRY result.</description>
    </item>
    
    <item>
      <title>Architect Is Not An Honorary Title</title>
      <link>/2006/10/architect-is-not-honorary-title.html</link>
      <pubDate>Thu, 12 Oct 2006 10:13:00 -0700</pubDate>
      
      <guid>/2006/10/architect-is-not-honorary-title.html</guid>
      <description>The job title &amp;ldquo;architect&amp;rdquo; seems to mean something different inside every organization. At far too many companies, it is almost an honorary title, being reserved as a promotion for long-term company loyalists who &amp;ldquo;know the business&amp;rdquo;, instead of actually meaning anything related to the overarching technical design required for the successful release of quality software.
Knowing the business is great. In fact, knowing the business is essential. I hope that business experts abound within your organization.</description>
    </item>
    
  </channel>
</rss>
